openapi: 3.0.1
info:
  title: L'Heure De La Tournée - Description de l'API
  version: '0.1.0'
  description: |
    Cette documentation reflète le fonctionnement de l'Heure De La Tournée, un projet universitaire multi frontend et multi backend pour apprendre à utiliser des technologies du web moderne en séparant le front et le back.

    Que vous développiez un frontend ou un backend, il doit être conforme à cette documentation pour être compatible avec n'importe quelle autre backend/frontend.

    HDLT est un service ou l'on s'inscrit et déclare des changements de status. 1 changement de status = 1 tournée !
  contact:
    name: Sinux
    email: hdlt@sinux.sh
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
paths:
  /version:
    get:
      summary: Version de l'API
      description: Renvoie la version de l'API qu'utilise le backend
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  version:
                    format: version
                    type: string
                    example: "1.17.1"
                required:
                  - version
  /login:
    post:
      summary: Connecter un utilisateur
      operationId: loginUser
      description: |-
        Permet à un utilisateur de se connecter avec ses identifiants. 
        S'ils sont correctes, il reçoit en retour un token JWT.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredential'
        required: true
      tags:
        - Authentification
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: successful operation
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /token:
    post:
      summary: Rafraichi le token de l'utilisateur
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
        required: true
      tags:
        - Authentification
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: successful operation
        '401':
          $ref: '#/components/responses/Unauthorized'
  /users:
    get:
      summary: Liste d'utilisateurs
      operationId: getUserList
      description: Récupère la liste des utilisateurs
      tags:
        - Utilisateurs
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserModel'
          description: successful operation
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - JWTAuth: []
    post:
      summary: Enregistrer un utilisateur
      operationId: registerUser
      description: |-
        Permet à un utilisateur de s'enregistrer auprès du backend.
        Le 1er utilisateur à s'enregistrer est administrateur, les autres sont de simple utilisateurs.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
        required: true
      tags:
        - Utilisateurs
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserModel'
          description: successful operation
        '400':
          $ref: '#/components/responses/BadRequest'
  /users/{userId}:
    get:
      summary: Trouver un utilisateur avec son ID
      operationId: getUserById
      description: Renvoie les données d'un utilisateur bien particulier
      tags:
        - Utilisateurs
      parameters:
        - name: userId
          description: ID de l'utilisateur à retourner
          schema:
            format: int64
            type: integer
          in: path
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserModel'
          description: successful operation
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - JWTAuth: []
    put:
      summary: Mettre à jour un utilisateur 
      operationId: updateUser
      description: Met à jour les informations personnelles d'un utilisateur
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateData'
        required: true
      tags:
        - Utilisateurs
      parameters:
        - name: userId
          description: ID de l'utilisateur à modifier
          schema:
            format: int64
            type: integer
          in: path
          required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserModel'
          description: successful operation
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - JWTAuth: []
    delete:
      summary: Supprimer un utilisateur
      operationId: deleteUser
      description: |-
        Supprime un utilisateur depuis son ID.
        Seul l'utilisateur en question ou un administrateur peut faire ça.
      tags:
        - Utilisateurs
      parameters:
        - name: userId
          description: ID de l'utilisateur à supprimer
          schema:
            format: int64
            type: integer
          in: path
          required: true
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '404':
          $ref: '#/components/responses/NotFound'
      security:
        - JWTAuth: []
  /laws:
    get:
      summary: Liste des changements de status possible
      operationId: getLawsList
      description: |-
        Récupère la liste des lois, c'est à dire la liste des articles.

        Elles sont écrites en dure, non modifiables et écrites pour l'homme.
      tags:
        - Lois
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  laws:
                    type: array
                    items:
                      $ref: '#/components/schemas/LawModel'
          description: successful operation
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - JWTAuth: []
  /status:
    get:
      summary: Liste des tournées
      operationId: getStatusList
      description: Récupère la liste des status, le plus récent en premier
      tags:
        - Statuts
      parameters:
        - in: query
          name: paye
          schema:
            type: boolean
            format: boolean
            nullable: true
            default: null
          required: false
          description: Filtre les statuts qui ont été payé ou non. Si non spécifié, renvoie tous les statuts.
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: array
                    items:
                      $ref: '#/components/schemas/StatusModel'
          description: successful operation
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - JWTAuth: []
    post:
      summary: Déclarer changement statuts
      operationId: registerStatus
      description: Déclare le changement de statuts d'un utilisateur
      tags:
        - Statuts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusRegistration'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusModel'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - JWTAuth: []
    put:
      summary: Valider une tournée
      operationId: updateStatus
      description: Déclarer qu'un tournée a été payé
      tags:
        - Statuts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StatusUpdate'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusModel'
        '401':
          $ref: '#/components/responses/Unauthorized'
      security:
        - JWTAuth: []
components:
  schemas:
    UserRegistration:
      required:
        - login
        - password
      type: object
      properties:
        login:
          format: string
          type: string
        password:
          format: string
          type: string
          minLength: 6
    StatusRegistration:
      required:
        - lawId
        - description
        - date
      type: object
      properties:
        lawId:
          format: int32
          type: integer
        description:
          format: string
          type: string
        date:
          format: date-time
          type: string
        paye:
          format: boolean
          type: boolean
          default: false
    StatusUpdate:
      required:
        - statusId
        - paye
      type: object
      properties:
        statusId:
          format: int32
          type: integer
        paye:
          format: boolean
          type: boolean
    AuthToken:
      required:
        - access_token
        - refresh_token
      type: object
      properties:
        access_token:
          format: string
          type: string
        refresh_token:
          format: string
          type: string
    RefreshToken:
      required:
        - token
      type: object
      properties:
        token:
          format: string
          type: string
    LoginCredential:
      required:
        - login
        - password
      type: object
      properties:
        login:
          format: string
          type: string
        password:
          format: string
          type: string
          minLength: 6
    UserUpdateData:
      type: object
      properties:
        login:
          format: string
          type: string
        password:
          format: password
          type: string
          minLength: 6
    UserModel:
      type: object
      properties:
        id:
          format: int32
          type: integer
        login:
          format: string
          type: string
        roles:
          format: string
          type: string
        is_active:
          type: boolean
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required: 
        - id
        - login
        - roles
        - is_active
    LawModel:
      type: object
      properties:
        id:
          format: int32
          type: integer
        name:
          format: string
          type: string
        description:
          format: string
          type: string
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required:
        - id
        - name
        - description
    StatusModel:
      type: object
      properties:
        id:
          format: int32
          type: integer
        lawId:
          format: lawId
          type: integer
        description:
          format: string
          type: string
        date:
          format: date-time
          type: string
        paye:
          format: boolean
          type: boolean
        created_at:
          format: date-time
          type: string
        updated_at:
          format: date-time
          type: string
      required:
        - id
        - lawId
        - description
        - date
        - paye
    Error:
      type: object
      properties:
        code:
          type: string
          example: '404'
        message:
          oneOf:
            - type: string
              format: error_description
            - type: array
              items:
                type: string
                format: error_description
      required:
        - code
        - message

  responses:
    NotFound:
      description: La ressource n'a pas été trouvé
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            OneError:
              $ref: '#/components/examples/OneNotFound'
    Unauthorized:
      description: Vous n'avez pas la permission pour cette action
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            OneError:
              $ref: '#/components/examples/OneUnauthorized'
    BadRequest:
      description: La requête n'est pas valide
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            MultipleErrors:
              $ref: '#/components/examples/MultipleBadRequest'
            OneError:
              $ref: '#/components/examples/OneBadRequest'
    NoContent:
      description: La requête a été accepter, pas de données supplémentaires

  examples:
    OneNotFound:
      summary: Non trouvé
      value:
        code: '404'
        message: "La ressource n'existe pas"
    OneUnauthorized:
      summary: Pas la permission
      value:
        code: '401'
        message: "Vous n'avez pas la permission pour cette action"
    OneBadRequest:
      summary: Requête incorrect, une seule erreur
      value:
        code: '400'
        message: "Il manque un champ"
    MultipleBadRequest:
      summary: Requête incorrect, plusieurs erreurs
      value:
        code: '400'
        message:
          - "Un champ n'est pas du bon type"
          - "Il manque un champ"

  securitySchemes:
    JWTAuth:
      scheme: bearer
      bearerFormat: JWT
      type: http
      description: |-
        Example: 
        > Authorization: Bearer <token>
  headers: {}
  parameters: {}
tags:
  - name: Authentification
    description: Authentification JWT
  - name: Utilisateurs
    description: Opérations sur les utilisateurs
  - name: Statuts
    description: Opérations sur les statuts
  - name: Lois
    description: Opérations sur les lois
security: []


